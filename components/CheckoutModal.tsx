'use client'

import { useState, useCallback } from 'react'
import { X } from 'lucide-react'
import Image from 'next/image'
import { useCart } from '@/contexts/CartContext'
import { useToast } from '@/contexts/ToastContext'
import { exportOBJ as generateRegularOBJ } from '@/utils/objExporter'
import { exportRoundedKeychainOBJ as generateRoundedOBJ } from '@/utils/roundedObjExporter'
import JSZip from 'jszip'
import KeychainPreview from './KeychainPreview'

interface CheckoutModalProps {
  isOpen: boolean
  onClose: () => void
}

export default function CheckoutModal({ isOpen, onClose }: CheckoutModalProps) {
  const { items, clearCart } = useCart()
  const { showToast } = useToast()
  
  // Helper function to convert hex colors to readable names (same as individual generators)
  const colorMap: { [key: string]: string } = {
    '#FFFFFF': 'Cotton White',
    '#D3D3D3': 'Light Grey',
    '#000000': 'Black',
    '#FFB6C1': 'Sakura Pink',
    '#FFC0CB': 'Pink',
    '#FF0000': 'Red',
    '#FFB347': 'Pastel Orange',
    '#FFFF00': 'Yellow',
    '#FFFFE0': 'Pastel Yellow',
    '#98FB98': 'Pale Green',
    '#98FF98': 'Mint Green',
    '#006400': 'Dark Green',
    '#008080': 'Teal',
    '#ADD8E6': 'Light Blue',
    '#000080': 'Navy Blue',
    '#0F52BA': 'Sapphire Blue',
    '#CCCCFF': 'Periwinkle',
    '#967BB6': 'Lavender Purple'
  }

  const getColorName = (hexColor: string) => {
    return colorMap[hexColor.toUpperCase()] || colorMap[hexColor] || hexColor
  }
  
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitProgress, setSubmitProgress] = useState(0)
  const [activeQR, setActiveQR] = useState<'gcash' | 'maya' | null>(null)
  const [selectedFile, setSelectedFile] = useState<{ data: string; type: string } | null>(null)
  const [showTutModal, setShowTutModal] = useState(false)
  const [tutMethod, setTutMethod] = useState<'gcash' | 'maya' | null>(null)
  const [hasSeenTutorial, setHasSeenTutorial] = useState<{ gcash: boolean; maya: boolean }>({ gcash: false, maya: false })
  const [deliveryOption, setDeliveryOption] = useState('')
  const [showDeliveryFields, setShowDeliveryFields] = useState(false)
  const [showAllKeychains, setShowAllKeychains] = useState(false)

  const generateKeychainOBJs = async (cartItems: typeof items) => {
    const nameCounts: { [key: string]: number } = {}
    const results = []

    for (let i = 0; i < cartItems.length; i++) {
      const item = cartItems[i]
      
      const base = item.parameters.line1.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'keychain'
      nameCounts[base] = (nameCounts[base] || 0) + 1
      const folderName = nameCounts[base] > 1 ? `${base}_${nameCounts[base]}` : base
      const fileName = item.name // KEYGO or KEYTONE
      
      const { obj, mtl } = item.type === 'regular' 
        ? await generateRegularOBJ(item.parameters, `${fileName}.mtl`)
        : await generateRoundedOBJ(item.parameters, `${fileName}.mtl`)
      
      results.push({
        folderName,
        objContent: obj,
        mtlContent: mtl,
        itemName: item.name,
        itemType: item.type
      })
    }
    
    return results
  }

  const createZipFile = async (objFiles: any[]) => {
    const zip = new JSZip()
    
    objFiles.forEach(({ folderName, objContent, mtlContent, itemName, itemType }) => {
      const folder = zip.folder(folderName)
      folder?.file(`${itemName}.obj`, objContent)
      folder?.file(`${itemName}.mtl`, mtlContent)
      folder?.file('README.txt', `Keychain: ${itemName} (${itemType})\nGenerated by Eunoia Made`)
    })
    
    return await zip.generateAsync({ type: 'base64' })
  }

  const handlePurchaseSubmit = useCallback(async (formData: any) => {
    if (!activeQR) {
      showToast('Please select a payment method (GCash or Maya)', 'error')
      return
    }

    if (!selectedFile) {
      showToast('Please upload your payment receipt first', 'error')
      return
    }

    setIsSubmitting(true)
    setSubmitProgress(0)

    try {
      setSubmitProgress(20)
      const objFiles = await generateKeychainOBJs(items)
      
      setSubmitProgress(40)
      const zipBase64 = await createZipFile(objFiles)

      setSubmitProgress(60)
      
      // Create the full payload with the CORRECT structure (same as individual generators)
      const payload = {
        customerInfo: {
          name: formData.name,
          phone: formData.phone,
          email: formData.email,
          socialMedia: formData.socialMedia || null,
          deliveryOption: formData.deliveryOption,
          address: formData.deliveryOption === 'delivery' ? formData.address : null,
          landmark: formData.deliveryOption === 'delivery' ? formData.landmark : null
        },
        order: {
          items: items.map(item => ({
            text: {
              line1: item.parameters.line1,
              line2: item.parameters.line2,
              baseColor: getColorName(item.parameters.baseColor),
              ...(item.parameters.twoColors && { textColor: getColorName(item.parameters.textColor) }),
              font: item.parameters.font
            }
          })),
          totalAmount: getTotalPrice(),
          objFiles: {
            mimeType: "application/zip",
            data: zipBase64
          }
        },
        payment: {
          receipt: {
            mimeType: selectedFile.type,
            data: selectedFile.data
          },
          method: activeQR || null
        }
      }

      setSubmitProgress(80)

      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      })

      if (!response.ok) {
        throw new Error('Failed to submit order')
      }

      setSubmitProgress(100)
      showToast('Order submitted successfully!', 'success')
      
      clearCart()
      onClose()
      
    } catch (error) {
      console.error('Error submitting order:', error)
      showToast('Failed to submit order. Please try again.', 'error')
    } finally {
      setIsSubmitting(false)
      setSubmitProgress(0)
    }
  }, [activeQR, selectedFile, items, showToast, clearCart, onClose])

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      // Check file size (3MB limit)
      const MAX_SIZE = 3 * 1024 * 1024 // 3MB in bytes
      if (file.size > MAX_SIZE) {
        showToast('File is too large. Please upload an image under 3MB.', 'error')
        e.target.value = '' // Reset input
        return
      }

      const reader = new FileReader()
      reader.onload = (event) => {
        const base64Data = event.target?.result as string
        // Extract the base64 data without the data URL prefix
        const [, mime, data] = base64Data.match(/^data:(.*);base64,(.*)$/) || []
        setSelectedFile({
          data: data,
          type: mime
        })
      }
      reader.readAsDataURL(file)
    }
  }

  const getTotalPrice = () => {
    return items.reduce((total, item) => total + (item.price * item.quantity), 0)
  }

  const getTotalItems = () => {
    return items.reduce((total, item) => total + item.quantity, 0)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[9999] p-4">
      <div className="bg-white rounded-lg w-full max-h-[90vh] overflow-y-auto max-w-[90vw]">
        <div className="p-6">
          {/* Tutorial Modal */}
          {showTutModal && tutMethod && (
            <div className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4" onClick={() => setShowTutModal(false)}>
              <div className="bg-white rounded-lg max-w-lg w-full max-h-[90vh] overflow-y-auto shadow-lg" onClick={(e) => e.stopPropagation()}>
                <div className="p-4 border-b flex flex-col justify-between">
                  <h3 className="text-lg font-semibold text-gray-800">
                    {tutMethod === 'gcash' ? 'GCash Reference Guide' : 'Maya Reference Guide'}
                  </h3>
                  <button
                    className={`text-white ${tutMethod === 'gcash' ? 'bg-[#1E3C96]' : 'bg-[#008242]'} rounded-lg hover:bg-colors.primary.600 w-fit p-2 border border-gray-200 mt-2`}
                    onClick={() => {
                      setHasSeenTutorial(prev => ({ ...prev, [tutMethod]: true }))
                      setShowTutModal(false)
                    }}
                  >
                    I Understand
                  </button>
                </div>
                <div className="p-4 space-y-3">
                  {tutMethod === 'gcash' ? (
                    <div className="space-y-2">
                      <p className="text-sm text-gray-600">Find the Reference Number in your GCash receipt like this:</p>
                      <div className="mx-auto w-[292px] h-[633px] max-w-[85vw] max-h-[80vh]">
                        <img src="/gcashtut.PNG" alt="GCash Tutorial" className="w-full h-full object-contain rounded-md border" />
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <p className="text-sm text-gray-600">Follow these steps to locate the Maya Reference ID:</p>
                      <div className="mx-auto w-[292px] h-[633px] max-w-[85vw] max-h-[80vh]">
                        <img src="/mayatut1.PNG" alt="Maya Tutorial 1" className="w-full h-full object-contain rounded-md border" />
                      </div>
                      <div className="mx-auto w-[292px] h-[633px] max-w-[85vw] max-h-[80vh]">
                        <img src="/mayatut2.PNG" alt="Maya Tutorial 2" className="w-full h-full object-contain rounded-md border" />
                      </div>
                      <div className="mx-auto w-[292px] h-[633px] max-w-[85vw] max-h-[80vh]">
                        <img src="/mayatut3.PNG" alt="Maya Tutorial 3" className="w-full h-full object-contain rounded-md border" />
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-800">Purchase Keychains</h2>
            <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg">
              <X className="w-5 h-5" />
            </button>
          </div>

          <div className="flex flex-col lg:flex-row lg:gap-8">
            {/* Customer Form */}
            <form 
              id="checkout-form"
              onSubmit={(e) => {
                e.preventDefault()
                const formData = new FormData(e.currentTarget)
                const data = Object.fromEntries(formData)
                handlePurchaseSubmit(data)
              }}
              className="space-y-4 lg:flex-1"
            >
              <div>
                <input
                  type="text"
                  name="name"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Name"
                />
              </div>
              <div>
                <input
                  type="tel"
                  name="phone"
                  required
                  pattern="[0-9]{11}"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Phone Number"
                />
              </div>
              <div>
                <input
                  type="email"
                  name="email"
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Email"
                />
              </div>
              <div>
                <input
                  type="text"
                  name="socialMedia"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Social Media (Optional)"
                />
              </div>
              <div>
                <select 
                  name="deliveryOption"
                  required
                  value={deliveryOption}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  onChange={(e) => {
                    const value = e.target.value
                    setDeliveryOption(value)
                    setShowDeliveryFields(value === 'delivery')
                  }}
                >
                  <option value="" disabled>Select Delivery Option</option>
                  <option value="delivery">Delivery</option>
                  <option value="pickup">Pickup</option>
                </select>

                {/* Delivery Fields */}
                {showDeliveryFields && (
                  <div className="mt-2 flex md:flex-row flex-col gap-2">
                    <input
                      type="text"
                      name="address"
                      required
                      className="flex-1 px-3 py-1 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Complete Address"
                    />
                    <input
                      type="text"
                      name="landmark"
                      required
                      className="flex-1 px-3 py-1 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Notable Landmark"
                    />
                  </div>
                )}
              </div>

              {/* Payment Options */}
              <div className="space-y-4">
                <div className="flex gap-6">
                  {/* Payment Buttons */}
                  <div className="flex flex-col gap-4 w-1/3">
                    {/* GCash */}
                    <button
                      type="button"
                      onClick={() => {
                        const next = activeQR === 'gcash' ? null : 'gcash'
                        setActiveQR(next)
                        if (next && !hasSeenTutorial.gcash) {
                          setTutMethod('gcash')
                          setShowTutModal(true)
                        }
                      }}
                      className={`w-full h-16 rounded-lg border transition-all relative overflow-hidden ${
                        activeQR === 'gcash' 
                          ? 'bg-[#0071BB] border-blue-500 ring-2 ring-blue-500' 
                          : 'bg-[#0071BB] border-gray-200 hover:border-blue-500'
                      }`}
                    >
                      <Image
                        src="/gcashlg.png"
                        alt="GCash Logo"
                        fill
                        className="object-contain p-2"
                      />
                    </button>

                    {/* Maya */}
                    <button
                      type="button"
                      onClick={() => {
                        const next = activeQR === 'maya' ? null : 'maya'
                        setActiveQR(next)
                        if (next && !hasSeenTutorial.maya) {
                          setTutMethod('maya')
                          setShowTutModal(true)
                        }
                      }}
                      className={`w-full h-16 rounded-lg border transition-all relative overflow-hidden ${
                        activeQR === 'maya' 
                          ? 'bg-black border-blue-500 ring-2 ring-blue-500' 
                          : 'bg-black border-gray-200 hover:border-blue-500'
                      }`}
                    >
                      <Image
                        src="/mayalg.jpg"
                        alt="Maya Logo"
                        fill
                        className="object-contain p-2"
                      />
                    </button>
                  </div>

                  {/* QR Code Display */}
                  <div className="flex-1 relative">
                    <div className="aspect-square max-h-[145px] bg-gray-50 rounded-lg border border-gray-200 flex items-center justify-center">
                      {activeQR ? (
                        <div className="relative w-full h-full animate-fade-in">
                          <Image
                            src={activeQR === 'gcash' ? '/Gcash.png' : '/Maya.png'}
                            alt={`${activeQR === 'gcash' ? 'GCash' : 'Maya'} QR Code`}
                            fill
                            className="object-contain p-4"
                          />
                        </div>
                      ) : (
                        <p className="text-gray-400 text-center text-sm">Select a payment method</p>
                      )}
                    </div>
                    <span className="text-black text-center text-sm font-bold">{`${activeQR === 'gcash' ? "Eu**** Se****" : activeQR === 'maya' ? "Pa*** Sa****" : ""}`}</span>
                  </div>
                </div>
              </div>


            </form>

            {/* Right Side Content - Desktop */}
            <div className="mt-6 lg:mt-0 lg:w-96 space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-gray-800 mb-3">Selected Keychains</h3>
                <div className="space-y-3">
                  {(showAllKeychains ? items : items.slice(0, 1)).map((item) => (
                    <div key={item.id} className="p-3 border border-gray-200 rounded-lg">
                      <div className="flex items-start gap-3">
                        {/* 3D Keychain Preview */}
                        <div className="self-center w-[110px] h-[110px] rounded-lg shadow-sm flex-shrink-0 bg-gray-50 overflow-hidden">
                          <KeychainPreview 
                            type={item.type} 
                            parameters={item.parameters}
                            className="w-full h-full"
                          />
                        </div>
                        
                        {/* Keychain Details */}
                        <div className="flex-1">
                          <div className="text-sm font-medium text-black">
                            {item.parameters.line1 || 'No text'}
                          </div>
                          {item.parameters.line2 && (
                            <div className="text-sm text-black">
                              {item.parameters.line2}
                            </div>
                          )}
                          <div className="text-xs text-gray-500 mt-1">
                            {item.name} ({item.type}) × {item.quantity}
                          </div>
                          <div className="text-sm font-semibold text-gray-800 mt-1">
                            ₱{item.price * item.quantity}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {items.length > 1 && (
                    <button
                      onClick={() => setShowAllKeychains(!showAllKeychains)}
                      className="w-full text-center text-blue-600 hover:text-blue-800 py-2"
                    >
                      {showAllKeychains ? 'Show Less' : `Show ${items.length - 1} More`}
                    </button>
                  )}
                </div>
              </div>

              {/* Receipt Upload - Right Side */}
              {activeQR && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-3">Payment Receipt</h3>
                  <div className="relative">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleFileUpload}
                      className="hidden"
                      id="receipt-upload"
                    />
                    <label
                      htmlFor="receipt-upload"
                      className={`block w-full p-6 text-center rounded-lg border-2 border-dashed transition-all duration-200 cursor-pointer ${
                        selectedFile 
                          ? 'border-green-500 bg-green-50 text-green-700 hover:bg-green-100' 
                          : 'border-gray-300 bg-gray-50 text-gray-600 hover:border-blue-500 hover:bg-blue-50 hover:text-blue-600'
                      }`}
                    >
                      <div className="flex flex-col items-center gap-3">
                        <div className="text-2xl">
                          {selectedFile ? '✓' : '📁'}
                        </div>
                        <div className="font-medium">
                          {selectedFile ? 'Receipt uploaded successfully!' : 'Click to upload receipt'}
                        </div>
                        <div className="text-xs opacity-75">
                          {selectedFile ? 'Tap to change' : 'PNG, JPG files only (max 3MB)'}
                        </div>
                      </div>
                    </label>
                  </div>
                </div>
              )}

              {items.length > 0 && (
                <div className="border-t pt-4">
                  <div className="flex justify-between items-center">
                    <span className="text-lg font-semibold text-gray-800">
                      Total ({getTotalItems()} {getTotalItems() === 1 ? 'piece' : 'pieces'})
                    </span>
                    <span className="text-xl font-bold text-gray-900">
                      ₱{getTotalPrice()}
                    </span>
                  </div>
                  {deliveryOption === 'delivery' && (
                    <p className="text-sm text-yellow-600 text-center font-bold mt-2">
                      Delivery fee will be calculated upon delivery
                    </p>
                  )}
                </div>
              )}

              {/* Submit Button - Right Side */}
              <button
                type="submit"
                form="checkout-form"
                disabled={isSubmitting || !activeQR || !selectedFile}
                className={`mt-2 w-full bg-[#FFB81C] text-white py-3 px-4 rounded-lg transition-colors font-medium relative overflow-hidden ${
                  isSubmitting || !activeQR || !selectedFile
                    ? 'opacity-75 cursor-not-allowed'
                    : 'hover:bg-[#FFB81C]'
                }`}
              >
                {isSubmitting ? (
                  <div className="flex items-center justify-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    <span>Processing Order... {submitProgress}%</span>
                  </div>
                ) : (
                  'Submit Order'
                )}
                {isSubmitting && (
                  <div 
                    className="absolute bottom-0 left-0 h-1 bg-white transition-all duration-300"
                    style={{ width: `${submitProgress}%` }}
                  />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
