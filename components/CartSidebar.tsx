'use client'

import { useState, useEffect } from 'react'
import { X, ShoppingCart, Plus, Minus, Trash2, Download } from 'lucide-react'
import { useCart } from '@/contexts/CartContext'
import CheckoutModal from './CheckoutModal'
import { exportOBJ as generateRegularOBJ } from '@/utils/objExporter'
import { exportRoundedKeychainOBJ as generateRoundedOBJ } from '@/utils/roundedObjExporter'
import JSZip from 'jszip'

interface CartSidebarProps {
  isOpen: boolean
  onClose: () => void
}

export default function CartSidebar({ isOpen, onClose }: CartSidebarProps) {
  const { items, removeItem, updateQuantity, clearCart, getTotalPrice, getTotalItems } = useCart()
  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false)
  const [isAdminMode, setIsAdminMode] = useState(false)
  const [isExporting, setIsExporting] = useState(false)

  // Color mapping function
  const getColorName = (hexColor: string) => {
    const colorMap: { [key: string]: string } = {
      '#FFFFFF': 'Cotton White',
      '#D3D3D3': 'Light Grey',
      '#000000': 'Black',
      '#FFB6C1': 'Sakura Pink',
      '#FFC0CB': 'Pink',
      '#FF0000': 'Red',
      '#FFB347': 'Pastel Orange',
      '#FFFF00': 'Yellow',
      '#FFFFE0': 'Pastel Yellow',
      '#98FB98': 'Pale Green',
      '#98FF98': 'Mint Green',
      '#006400': 'Dark Green',
      '#008080': 'Teal',
      '#ADD8E6': 'Light Blue',
      '#000080': 'Navy Blue',
      '#0F52BA': 'Sapphire Blue',
      '#CCCCFF': 'Periwinkle',
      '#967BB6': 'Lavender Purple'
    }
    return colorMap[hexColor.toUpperCase()] || colorMap[hexColor] || hexColor
  }

  // Check for admin query parameter
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search)
      setIsAdminMode(urlParams.get('pass') === 'eunoia')
    }
  }, [])

  if (!isOpen) return null

  const handleCheckout = () => {
    setIsCheckoutOpen(true)
  }

  // Admin export functionality
  const generateKeychainOBJs = async (items: any[]) => {
    const nameCounts: { [key: string]: number } = {}
    const results = []

    for (let i = 0; i < items.length; i++) {
      const item = items[i]
      
      const { obj, mtl } = item.type === 'regular' 
        ? await generateRegularOBJ(item.parameters)
        : await generateRoundedOBJ(item.parameters)
      
      const base = item.parameters.line1.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'keychain'
      nameCounts[base] = (nameCounts[base] || 0) + 1
      const folderName = nameCounts[base] > 1 ? `${base}_${nameCounts[base]}` : base
      
      results.push({
        folderName,
        objContent: obj,
        mtlContent: mtl,
        itemName: item.type === 'regular' ? 'KEYGO' : 'KEYTONE',
        itemType: item.type
      })
    }
    
    return results
  }

  const createZipFile = async (objFiles: any[]) => {
    const zip = new JSZip()
    
    objFiles.forEach(({ folderName, objContent, mtlContent, itemName, itemType }) => {
      const folder = zip.folder(folderName)
      folder?.file('keychain.obj', objContent)
      folder?.file('keychain.mtl', mtlContent)
      folder?.file('README.txt', `Keychain: ${itemName} (${itemType})\nGenerated by Eunoia Made`)
    })
    
    return await zip.generateAsync({ type: 'blob' })
  }

  const handleExportNow = async () => {
    if (items.length === 0) return
    
    setIsExporting(true)
    
    try {
      const objFiles = await generateKeychainOBJs(items)
      const zipBlob = await createZipFile(objFiles)
      
      // Create download link
      const url = URL.createObjectURL(zipBlob)
      const a = document.createElement('a')
      a.href = url
      a.download = `eunoia-keychains-${new Date().toISOString().split('T')[0]}.zip`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
    } catch (error) {
      console.error('Export failed:', error)
    } finally {
      setIsExporting(false)
    }
  }

  return (
    <div className="fixed inset-0 z-[9999] overflow-hidden">
      {/* Backdrop */}
      <div 
        className="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
        onClick={onClose}
      />
      
      {/* Side Panel */}
      <div className="fixed right-0 top-0 h-full w-full max-w-md bg-white shadow-2xl transform transition-transform duration-300 ease-in-out border-l border-gray-200">
        {/* Header */}
        <div className="bg-white px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <ShoppingCart className="h-6 w-6 text-brand-blue" />
              <h3 className="text-lg font-semibold text-gray-900">
                Shopping Cart ({getTotalItems()})
              </h3>
            </div>
            <button
              onClick={onClose}
              className="rounded-md bg-white text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-blue"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto px-6 py-4 overflow-y">
          {items.length === 0 ? (
            <div className="text-center py-8">
              <ShoppingCart className="mx-auto h-12 w-12 text-gray-400" />
              <h3 className="mt-2 text-sm font-medium text-gray-900">Your cart is empty</h3>
              <p className="mt-1 text-sm text-gray-500">
                Start adding some keychains to your cart!
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {/* Cart Items */}
              <div className="space-y-3">
                {items.map((item) => (
                  <div key={item.id} className="flex items-center space-x-4 p-3 border border-gray-200 rounded-lg">
                    {/* Preview */}
                    <div className="flex-shrink-0 w-16 h-16 bg-gray-50 rounded-lg flex items-center justify-center">
                      <span className="text-xs font-bold text-gray-600">KEYGO</span>
                    </div>
                    
                    {/* Item Details */}
                    <div className="flex-1 min-w-0">
                      <h4 className="text-sm font-medium text-gray-900 truncate">
                        {item.parameters.line1}{item.parameters.line2 ? ` ${item.parameters.line2}` : ''}
                      </h4>
                      <p className="text-xs text-gray-500">
                        {getColorName(item.parameters.textColor)}, {getColorName(item.parameters.baseColor)}
                      </p>
                      <p className="text-sm font-semibold text-gray-900">
                        ₱{item.price}
                      </p>
                    </div>
                    
                    {/* Quantity Controls */}
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => updateQuantity(item.id, item.quantity - 1)}
                        className="p-1 rounded-full hover:bg-gray-100"
                        disabled={item.quantity <= 1}
                      >
                        <Minus className="h-4 w-4" />
                      </button>
                      <span className="text-sm font-medium w-8 text-center">
                        {item.quantity}
                      </span>
                      <button
                        onClick={() => updateQuantity(item.id, item.quantity + 1)}
                        className="p-1 rounded-full hover:bg-gray-100"
                      >
                        <Plus className="h-4 w-4" />
                      </button>
                    </div>
                    
                    {/* Remove Button */}
                    <button
                      onClick={() => removeItem(item.id)}
                      className="p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-full"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                ))}
              </div>
              
              {/* Clear Cart Button */}
              {items.length > 0 && (
                <button
                  onClick={clearCart}
                  className="w-full text-sm text-gray-500 hover:text-red-600 py-2"
                >
                  Clear Cart
                </button>
              )}
            </div>
          )}
        </div>

        {/* Footer */}
        {items.length > 0 && (
          <div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
            <div className="flex justify-between items-center mb-4">
              <span className="text-lg font-semibold text-gray-900">
                Total: ₱{getTotalPrice()}
              </span>
            </div>
            
            {/* Admin Export Button */}
            {isAdminMode && (
              <button
                onClick={handleExportNow}
                disabled={isExporting}
                className="w-full inline-flex justify-center items-center gap-2 rounded-md bg-green-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600 disabled:opacity-50 disabled:cursor-not-allowed mb-3"
              >
                <Download className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'Export Now'}
              </button>
            )}
            
            <button
              onClick={handleCheckout}
              className="w-full inline-flex justify-center rounded-md bg-brand-blue px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-primary-600 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-blue"
            >
              Checkout
            </button>
          </div>
        )}
      </div>
      
      {/* Checkout Modal */}
      <CheckoutModal 
        isOpen={isCheckoutOpen} 
        onClose={() => setIsCheckoutOpen(false)} 
      />
    </div>
  )
}
