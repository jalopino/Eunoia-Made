'use client'

import { useState, useCallback, useRef } from 'react'
import Image from 'next/image'
import JSZip from 'jszip'
import RoundedParameterControls from './RoundedParameterControls'
import RoundedKeychainViewer from './RoundedKeychainViewer'
import { exportRoundedKeychainOBJ as generateOBJ } from '@/utils/roundedObjExporter'

import { KeychainParameters, roundedDefaultParameters, KeychainListItem } from '@/types/keychain'
import { X, ShoppingCart } from 'lucide-react'
import { useToast } from '@/contexts/ToastContext'
import { useCart } from '@/contexts/CartContext'


export default function RoundedKeychainGenerator() {
  // Helper function to convert hex colors to readable names
  const colorMap: { [key: string]: string } = {
    '#FFFFFF': 'Cotton White',
    '#D3D3D3': 'Light Grey',
    '#000000': 'Black',
    '#FFB6C1': 'Sakura Pink',
    '#FFC0CB': 'Pink',
    '#FF0000': 'Red',
    '#FFB347': 'Pastel Orange',
    '#FFFF00': 'Yellow',
    '#FFFFE0': 'Pastel Yellow',
    '#98FB98': 'Pale Green',
    '#98FF98': 'Mint Green',
    '#006400': 'Dark Green',
    '#008080': 'Teal',
    '#ADD8E6': 'Light Blue',
    '#000080': 'Navy Blue',
    '#0F52BA': 'Sapphire Blue',
    '#CCCCFF': 'Periwinkle',
    '#967BB6': 'Lavender Purple'
  }

  const getColorName = (hexColor: string) => {
    return colorMap[hexColor.toUpperCase()] || colorMap[hexColor] || hexColor
  }

  const [parameters, setParameters] = useState<KeychainParameters>(roundedDefaultParameters)
  const [pendingParameters, setPendingParameters] = useState<KeychainParameters>(roundedDefaultParameters)
  const [commitId, setCommitId] = useState(0)
  // Purchase functionality removed - use CheckoutModal from shop page
  const previewRef = useRef<HTMLDivElement>(null)
  const { showToast } = useToast()
  const { addItem, items: cartItems } = useCart()
  
  // Filter cart items to only show rounded keychain items
  const keychainList: KeychainListItem[] = cartItems
    .filter(item => item.type === 'rounded')
    .map(item => ({
      id: item.id,
      parameters: item.parameters,
      addedAt: item.addedAt
    }))

  const updateParameter = useCallback((key: keyof KeychainParameters, value: any) => {
    setPendingParameters(prev => ({ ...prev, [key]: value }))
  }, [])

  const resetToDefaults = useCallback(() => {
    setPendingParameters(roundedDefaultParameters)
  }, [])

  const handleGenerate = useCallback(() => {
    setParameters(pendingParameters)
    setCommitId(prev => prev + 1)
  }, [pendingParameters])

  const generateKeychainOBJs = async (items: KeychainListItem[]) => {
    const nameCounts: { [key: string]: number } = {}
    const results = []

    for (let i = 0; i < items.length; i++) {
      const item = items[i]
      
      const { obj, mtl } = await generateOBJ(item.parameters)
      
      const base = item.parameters.line1.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'keychain'
      nameCounts[base] = (nameCounts[base] || 0) + 1
      const folderName = nameCounts[base] > 1 ? `${base}_${nameCounts[base]}` : base
      
      results.push({
        folderName,
        objContent: obj,
        mtlContent: mtl,
        itemName: 'KEYTONE',
        itemType: 'rounded'
      })
    }
    
    return results
  }

  const createZipFile = async (objFiles: any[]) => {
    const zip = new JSZip()
    
    objFiles.forEach(({ folderName, objContent, mtlContent, itemName, itemType }) => {
      const folder = zip.folder(folderName)
      folder?.file(`${itemName}.obj`, objContent)
      folder?.file(`${itemName}.mtl`, mtlContent)
      folder?.file('README.txt', `Keychain: ${itemName} (${itemType})\nGenerated by Eunoia Made`)
    })
    
    return await zip.generateAsync({ type: 'base64' })
  }

  const calculateTotal = () => {
    const total = keychainList.length * 45 // â‚±45 per keychain
    return { total }
  }

  const handleAddToList = useCallback((customParameters?: KeychainParameters, customId?: string) => {
    const paramsToUse = customParameters || pendingParameters
    addItem({
      name: 'KEYTONE',
      type: 'rounded',
      price: 45,
      parameters: paramsToUse,
      quantity: 1
    })
    
    showToast('Keychain added to cart!', 'success')
  }, [pendingParameters, addItem, showToast])


  // Purchase functions removed - use CheckoutModal from shop page

  return (
    <div className="flex flex-col lg:flex-row gap-5 min-h-fit">
      {/* Parameter Controls - Above preview on mobile, sidebar on desktop */}
      <div className="lg:w-80 lg:bg-white lg:rounded-lg lg:p-3 lg:shadow-sm lg:border lg:border-gray-200">
        <div className="lg:h-full lg:flex lg:flex-col">
          <div className="lg:flex-1">
            <RoundedParameterControls
              parameters={pendingParameters}
              onParameterChange={updateParameter}
              onReset={resetToDefaults}
              onGenerate={handleGenerate}
              onAddToList={handleAddToList}
              keychainList={keychainList}
              onPurchase={() => {}} // Purchase functionality removed
              disableCheckout={true} // Disable checkout on individual keychain pages
            />
          </div>
        </div>
      </div>

      {/* 3D Viewer */}
      <div className="flex-1 relative" ref={previewRef}>
        <div className="sticky top-20 w-full">
            <RoundedKeychainViewer parameters={parameters} commitId={commitId} />
        </div>
      </div>

      {/* Purchase functionality removed - use CheckoutModal from shop page */}
    </div>
  )
}
